@page
@model PlanejaiFront.Pages.Calendar.IndexModel
@{
    int currentMonth = DateTime.Now.Month;
    int currentYear = DateTime.Now.Year;
    DateTime firstDay = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    int daysInCurrentMonth = DateTime.DaysInMonth(firstDay.Year, firstDay.Month);
    DateTime lastDay = new DateTime(currentYear, currentMonth, daysInCurrentMonth);
    int dayOfWeekFirst = ((int)firstDay.DayOfWeek > 0) ? (int)firstDay.DayOfWeek : 7;
    int dayOfWeekLast = ((int)lastDay.DayOfWeek > 0) ? (int)lastDay.DayOfWeek : 7;
}

<style>
    body {
        background-color: #e9ecef;
    }

    .wrapper {
        height: 60vh;
        margin: 10vh auto;
        width: 70%;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    }

    .calendar-container {
        height: 17.144%;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        background-color: #fff;
        border-radius: 5px;
    }

    .calendar-cell {
        flex: 0 0 14.28%;
        padding: 10px;
        text-align: center;
    }

    .calendar-holiday {
        background-color: #f7f7f7;
        font-weight: bold;
    }

    .previous-month-day,
    .next-month-day {
        opacity: 0.5;
    }

    .week-day-container {
        height: 14.28%;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        background-color: #fff;
        border-radius: 5px;
    }

    .weekday-label {
        font-weight: bold;
        background-color: #f1f1f1;
    }
</style>

<div class="wrapper">
    <div class="week-day-container">
        <div class="calendar-cell weekday-label">Dom</div>
        <div class="calendar-cell weekday-label">Seg</div>
        <div class="calendar-cell weekday-label">Ter</div>
        <div class="calendar-cell weekday-label">Qua</div>
        <div class="calendar-cell weekday-label">Qui</div>
        <div class="calendar-cell weekday-label">Sex</div>
        <div class="calendar-cell weekday-label">Sáb</div>
    </div>
    <div class="calendar-container">
        <!-- filling up space of previous month -->
        @for (int a = dayOfWeekFirst; a > 0; a--)
        {
            DateTime previousMonth = firstDay.AddMonths(-1);
            int daysInPreviousMonth = DateTime.DaysInMonth(previousMonth.Year, previousMonth.Month);
            int day = daysInPreviousMonth - (a - 1);
            <div class="calendar-cell previous-month-day">@day</div>
        }

        <!-- filling up space of current month -->
        @for (int i = 1; i <= daysInCurrentMonth; i++)
        {
            DateTime renderedDay = new DateTime(firstDay.Year, firstDay.Month, i);

            // if Sunday
            if (renderedDay.DayOfWeek == DayOfWeek.Sunday)
            {
                @:</div><div class="calendar-container">
            }

            // if Sunday or Saturday
            if (renderedDay.DayOfWeek == DayOfWeek.Sunday || renderedDay.DayOfWeek == DayOfWeek.Saturday)
            {
                <div class="calendar-cell calendar-holiday">@i</div>
            }
            // if normal day
            else
            {
                <div class="calendar-cell">@i</div>
            }

            // if last day of the month
            if (i == daysInCurrentMonth)
            {
                int remainingCells = 7 - ((int)lastDay.DayOfWeek + 1);
                for (int r = 1; r <= remainingCells; r++)
                {
                    DateTime nextMonth = lastDay.AddMonths(1);
                    int nextMonthDay = r;
                    <div class="calendar-cell next-month-day">@nextMonthDay</div>
                }
                @:</div>
            }
        }
    </div>